import re - Regex библеотека для регулярных выражений
re.compile(r'') - в скобках вводиться настройка для поиска
.search('')- ищет значения по настройкам которые были вписаны в re.compile('')
re.compile(r'()') - в дополнительных в скобках можно вставить настройку, которую можно будет не использовать или отправлять отдельно
mo.groups()- отправляет все что было найдено в виде кортежа
pere, pere = mo.groups()- присваиваеться каждой переменой свое значение по очереди из списка
re.compile(r'|')- выберит одно из двух которое было найдено в строке
re.compile(r'..(|))  - в дополнительных скобках указываеться еще доп настройка для слова, их может быть много
re.compile(r'..(..)?..) - в дополнительных настройках вводиться необязательная группа, без которой можно взаимодействовать
re.compile(r'..(..)*..) - с помощью * можно найти нулевое или большее количество экземпляров
re.compile(r'..(..)+..) - означает что значения должно быть один раз или с большим количеством экземпляров
re.compile(r'(..){..}')- в круглых скобках указываеться число в диапозоне или просто число, и находит он занчения только тогда когда в скобках и дипозон повторений равняються
pere.findall('')- нахидит все совападения и заностит их в списко.
re.compile(r'()-()-()')
pere.findall- Если он находит в таком формате как сверху , то будет заностит каждое в лист и в чертеж в скобках.
\d- Любая цифра в диапазоне 0 до 9
\D- Любой символ, не являющийся цифолй в диапазоне от 0 до 9
\w- Любая буква, цыфра или символ подчеркивания
\W- Любой символ, не являющийся буквой, цыфрой или символом подчеркивания
\s- Пробел, табуляция или символ новой  строки*так называеться пробельные символ)
\S- Любой символ, не являющийся пробелом, табуляцией или символом новой строке
? — нулевое или единичное вхождение предшествующей группы.
* — нулевое или произвольное количество вхождений предшествующей группы.
+ — одно или несколько вхождений предшествующей группы.
{n} - ровно n вхождений предшествующей группы.
{n, } — n или более вхождений предшествующей группы.
{ ,m) — отсутствие или вплоть до m вхождений предшествующей группы.
{n, m} — не менее чем n и не более чем m вхождений предшествующей группы.
{n, m}?, или *?, или +? — нежадный поиск вхождений предшествующей группы.
^spam — строка должна начинаться символами 'spam'.
spam$ — строка должна заканчиваться символами 'spam'.
. — любой символ, за исключением символа новой строки.
\d, \w и \s — одиночный цифровой, алфавитно-цифровой и пробельный символ соответственно.
\D, \W и \S — одиночный символ, нс являющийся цифровым, алфавит-но-цифровым и пробельным соответственно.
[abc] — любой одиночный символ из числа тех, которые указаны в квадратных скобках (например, 'а', 'Ь' или 'с').
[^аЬс] — любой одиночный символ, кроме тех, которые указаны в квадратных скобках.
re.compile(r'..', re.I)- Не имеет значения с заглавной или не с заглавной ты пишешь, оно все ровно найдет слово с любым регистром но совподающим со словом.
pere.sub('', '')- берет 1 сроку и заменяет все совподающиеся значения во 2 строке
re.compile(r'(\w)\w*')
pere.sub(r'\1*****', '')- (\w)\w* передаем в методу sub() в качестве первого аргумента строку 'r\1*****'. Сыллка \1 в этой строке будет заменять ся тем текстов, который будет захвачен группой 1, т.к группой (\w) регулярного выражения
re.compile(r'''()''')- если передаваемые настройки слишком велики или нужно добавить им коментарии, можно использовать тройные ординарные скобки(''') что дает свободно переносить все на новые строки.
