raise Exception('')- исключение с информацие при выводе, если нету try и except, то программа афарийно завершаеться
При использовании функция в функции, будет выводиться информация для каждой из функции
Если вызвать функцию в try и после ввести в except - .write(traceback.format_exc()) то все будет записано в данный файл.
assert .. ... ..- механиз который позволяет убедиться в выполнении программы. Если все таки будет ошибка, то названием будет AssertionError
Протоколирование- средство протоколирования позволяет получать информацию о том, что именно и в какой последовательности происходит в программе.
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(leveltime)s - %(message)s')- настройка для далнейшего использования. asctime- дата, leveltime- точное время, message- нормер сообщения
Уровни протоколиорования:
DEBUG	logging .debug ()- Самый низкий уровень. Предназначен для вывода малозначимой информации. Такие сообщения представляют интерес только при диагностике проблем
INFO	logging.infо ()- Предназначен для записи информации об обычных событиях, происходящих в программе, или для подтверждения нормального хода работы программы
WARNING	logging.warning ()- Предназначен для индикации потенциально опасных ситуаций, которые не препятствуют работе программы, но могут привести к этому в будущем
ERROR	logging .error ()- Предназначен для записи информации об ошибке, которая помешала программе выполнить требуемые действия
CRITICAL logging.critical ()- Наивысший уровень. Предназначен для индикации фатальных ошибок, которые привели или могут привести к аварийному завершению программы
logging.disable(logging.CRITICAL)- отключает все уведомления в консоли от logging, также если указать в скобках другой уровень, он будет отключен, но другие будут видны.
logging.basicConfog(filename='...',..)- сохраняет все отправление сообщения в файл